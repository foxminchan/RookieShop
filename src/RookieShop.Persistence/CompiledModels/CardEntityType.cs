// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using RookieShop.Domain.Entities.OrderAggregator;
using RookieShop.Domain.Entities.OrderAggregator.Primitives;
using RookieShop.Domain.Entities.OrderAggregator.ValueObjects;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RookieShop.Persistence.CompiledModels
{
    internal partial class CardEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card",
                typeof(Card),
                baseEntityType);

            var orderId = runtimeEntityType.AddProperty(
                "OrderId",
                typeof(OrderId),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            orderId.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<OrderId>(
                    (OrderId v1, OrderId v2) => v1.Equals(v2),
                    (OrderId v) => v.GetHashCode(),
                    (OrderId v) => v),
                keyComparer: new ValueComparer<OrderId>(
                    (OrderId v1, OrderId v2) => v1.Equals(v2),
                    (OrderId v) => v.GetHashCode(),
                    (OrderId v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"),
                converter: new ValueConverter<OrderId, Guid>(
                    (OrderId id) => id.Value,
                    (Guid value) => new OrderId(value)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<OrderId, Guid>(
                    JsonGuidReaderWriter.Instance,
                    new ValueConverter<OrderId, Guid>(
                        (OrderId id) => id.Value,
                        (Guid value) => new OrderId(value))));
            orderId.SetSentinelFromProviderValue(new Guid("00000000-0000-0000-0000-000000000000"));
            orderId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            orderId.AddAnnotation("Relational:ColumnName", "id");

            var brandName = runtimeEntityType.AddProperty(
                "BrandName",
                typeof(string),
                propertyInfo: typeof(Card).GetProperty("BrandName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Card).GetField("<BrandName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            brandName.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(50)",
                    size: 50));
            brandName.TypeMapping = ((NpgsqlStringTypeMapping)brandName.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        brandName.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        brandName.AddAnnotation("Relational:ColumnName", "card_brand_name");

        var chargeId = runtimeEntityType.AddProperty(
            "ChargeId",
            typeof(string),
            propertyInfo: typeof(Card).GetProperty("ChargeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Card).GetField("<ChargeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 50);
        chargeId.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(50)",
                size: 50));
        chargeId.TypeMapping = ((NpgsqlStringTypeMapping)chargeId.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    chargeId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    chargeId.AddAnnotation("Relational:ColumnName", "card_charge_id");

    var last4Digits = runtimeEntityType.AddProperty(
        "Last4Digits",
        typeof(string),
        propertyInfo: typeof(Card).GetProperty("Last4Digits", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Card).GetField("<Last4Digits>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        maxLength: 4);
    last4Digits.TypeMapping = NpgsqlCharacterStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string x, string y) => NpgsqlCharacterStringTypeMapping.EqualsWithoutTrailingWhitespace(x, y),
            (string x) => NpgsqlCharacterStringTypeMapping.GetHashCodeWithoutTrailingWhitespace(x),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string x, string y) => NpgsqlCharacterStringTypeMapping.EqualsWithoutTrailingWhitespace(x, y),
            (string x) => NpgsqlCharacterStringTypeMapping.GetHashCodeWithoutTrailingWhitespace(x),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string x, string y) => NpgsqlCharacterStringTypeMapping.EqualsWithoutTrailingWhitespace(x, y),
            (string x) => NpgsqlCharacterStringTypeMapping.GetHashCodeWithoutTrailingWhitespace(x),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character(4)",
            size: 4));
    last4Digits.TypeMapping = ((NpgsqlCharacterStringTypeMapping)last4Digits.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Char);
last4Digits.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
last4Digits.AddAnnotation("Relational:ColumnName", "card_last4digits");
last4Digits.AddAnnotation("Relational:IsFixedLength", true);

var key = runtimeEntityType.AddKey(
    new[] { orderId });
runtimeEntityType.SetPrimaryKey(key);

return runtimeEntityType;
}

public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
{
    var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OrderId") },
        principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
        principalEntityType,
        deleteBehavior: DeleteBehavior.Cascade,
        unique: true,
        required: true,
        ownership: true);

    var card = principalEntityType.AddNavigation("Card",
        runtimeForeignKey,
        onDependent: false,
        typeof(Card),
        propertyInfo: typeof(Order).GetProperty("Card", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Order).GetField("<Card>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        propertyAccessMode: PropertyAccessMode.Property,
        eagerLoaded: true);

    runtimeForeignKey.AddAnnotation("Relational:Name", "fk_orders_orders_id");
    return runtimeForeignKey;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "orders");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
