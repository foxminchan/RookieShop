// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RookieShop.Persistence.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var category = CategoryEntityType.Create(this);
            var customer = CustomerEntityType.Create(this);
            var feedback = FeedbackEntityType.Create(this);
            var order = OrderEntityType.Create(this);
            var orderDetail = OrderDetailEntityType.Create(this);
            var card = CardEntityType.Create(this);
            var shippingAddress = ShippingAddressEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productPrice = ProductPriceEntityType.Create(this);

            FeedbackEntityType.CreateForeignKey1(feedback, customer);
            FeedbackEntityType.CreateForeignKey2(feedback, product);
            OrderEntityType.CreateForeignKey1(order, customer);
            OrderDetailEntityType.CreateForeignKey1(orderDetail, order);
            OrderDetailEntityType.CreateForeignKey2(orderDetail, product);
            CardEntityType.CreateForeignKey1(card, order);
            ShippingAddressEntityType.CreateForeignKey1(shippingAddress, order);
            ProductEntityType.CreateForeignKey1(product, category);
            ProductPriceEntityType.CreateForeignKey1(productPrice, product);

            CategoryEntityType.CreateAnnotations(category);
            CustomerEntityType.CreateAnnotations(customer);
            FeedbackEntityType.CreateAnnotations(feedback);
            OrderEntityType.CreateAnnotations(order);
            OrderDetailEntityType.CreateAnnotations(orderDetail);
            CardEntityType.CreateAnnotations(card);
            ShippingAddressEntityType.CreateAnnotations(shippingAddress);
            ProductEntityType.CreateAnnotations(product);
            ProductPriceEntityType.CreateAnnotations(productPrice);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.4");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var category = FindEntityType("RookieShop.Domain.Entities.CategoryAggregator.Category")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase = new TableBase("RookieShop.Domain.Entities.CategoryAggregator.Category", null, relationalModel);
            var created_dateColumnBase = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("created_date", created_dateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("name", nameColumnBase);
            var update_dateColumnBase = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("update_date", update_dateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.CategoryAggregator.Category", rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase);
            var rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase, true);
            rookieShopDomainEntitiesCategoryAggregatorCategoryTableBase.AddTypeMapping(rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase, false);
            defaultTableMappings.Add(rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, category.FindProperty("Id")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase, category.FindProperty("CreatedDate")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, category.FindProperty("Description")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, category.FindProperty("Name")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase, category.FindProperty("UpdateDate")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, category.FindProperty("Version")!, rookieShopDomainEntitiesCategoryAggregatorCategoryMappingBase);

            var tableMappings = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn = new Column("id", "uuid", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn);
            var created_dateColumn = new Column("created_date", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_date", created_dateColumn);
            var descriptionColumn = new Column("description", "character varying(1000)", categoriesTable);
            categoriesTable.Columns.Add("description", descriptionColumn);
            var nameColumn = new Column("name", "character varying(50)", categoriesTable);
            categoriesTable.Columns.Add("name", nameColumn);
            var update_dateColumn = new Column("update_date", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("update_date", update_dateColumn);
            var versionColumn = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.CategoryAggregator.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn, category.FindProperty("CreatedDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, category.FindProperty("Description")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn, category.FindProperty("UpdateDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, category.FindProperty("Version")!, categoriesTableMapping);

            var customer = FindEntityType("RookieShop.Domain.Entities.CustomerAggregator.Customer")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            customer.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase = new TableBase("RookieShop.Domain.Entities.CustomerAggregator.Customer", null, relationalModel);
            var account_idColumnBase = new ColumnBase<ColumnMappingBase>("account_id", "uuid", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("account_id", account_idColumnBase);
            var created_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("created_date", created_dateColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(50)", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("email", emailColumnBase);
            var genderColumnBase = new ColumnBase<ColumnMappingBase>("gender", "smallint", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("gender", genderColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("id", idColumnBase0);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("name", nameColumnBase0);
            var phoneColumnBase = new ColumnBase<ColumnMappingBase>("phone", "character varying(20)", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("phone", phoneColumnBase);
            var update_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("update_date", update_dateColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.CustomerAggregator.Customer", rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase);
            var rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase = new TableMappingBase<ColumnMappingBase>(customer, rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase, true);
            rookieShopDomainEntitiesCustomerAggregatorCustomerTableBase.AddTypeMapping(rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase, false);
            defaultTableMappings0.Add(rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, customer.FindProperty("Id")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)account_idColumnBase, customer.FindProperty("AccountId")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase0, customer.FindProperty("CreatedDate")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, customer.FindProperty("Email")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)genderColumnBase, customer.FindProperty("Gender")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, customer.FindProperty("IsDeleted")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, customer.FindProperty("Name")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneColumnBase, customer.FindProperty("Phone")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase0, customer.FindProperty("UpdateDate")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, customer.FindProperty("Version")!, rookieShopDomainEntitiesCustomerAggregatorCustomerMappingBase);

            var tableMappings0 = new List<TableMapping>();
            customer.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var customersTable = new Table("customers", null, relationalModel);
            var idColumn0 = new Column("id", "uuid", customersTable);
            customersTable.Columns.Add("id", idColumn0);
            var account_idColumn = new Column("account_id", "uuid", customersTable)
            {
                IsNullable = true
            };
            customersTable.Columns.Add("account_id", account_idColumn);
            var created_dateColumn0 = new Column("created_date", "timestamp with time zone", customersTable);
            customersTable.Columns.Add("created_date", created_dateColumn0);
            var emailColumn = new Column("email", "character varying(50)", customersTable);
            customersTable.Columns.Add("email", emailColumn);
            var genderColumn = new Column("gender", "smallint", customersTable);
            customersTable.Columns.Add("gender", genderColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", customersTable);
            customersTable.Columns.Add("is_deleted", is_deletedColumn);
            var nameColumn0 = new Column("name", "character varying(50)", customersTable);
            customersTable.Columns.Add("name", nameColumn0);
            var phoneColumn = new Column("phone", "character varying(20)", customersTable);
            customersTable.Columns.Add("phone", phoneColumn);
            var update_dateColumn0 = new Column("update_date", "timestamp with time zone", customersTable)
            {
                IsNullable = true
            };
            customersTable.Columns.Add("update_date", update_dateColumn0);
            var versionColumn0 = new Column("version", "uuid", customersTable);
            customersTable.Columns.Add("version", versionColumn0);
            var pk_customers = new UniqueConstraint("pk_customers", customersTable, new[] { idColumn0 });
            customersTable.PrimaryKey = pk_customers;
            var pk_customersUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.CustomerAggregator.Customer",
                new[] { "Id" });
            pk_customers.MappedKeys.Add(pk_customersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_customersUc).Add(pk_customers);
            customersTable.UniqueConstraints.Add("pk_customers", pk_customers);
            relationalModel.Tables.Add(("customers", null), customersTable);
            var customersTableMapping = new TableMapping(customer, customersTable, true);
            customersTable.AddTypeMapping(customersTableMapping, false);
            tableMappings0.Add(customersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, customer.FindProperty("Id")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(account_idColumn, customer.FindProperty("AccountId")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn0, customer.FindProperty("CreatedDate")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, customer.FindProperty("Email")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(genderColumn, customer.FindProperty("Gender")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, customer.FindProperty("IsDeleted")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, customer.FindProperty("Name")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(phoneColumn, customer.FindProperty("Phone")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn0, customer.FindProperty("UpdateDate")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, customer.FindProperty("Version")!, customersTableMapping);

            var feedback = FindEntityType("RookieShop.Domain.Entities.FeedbackAggregator.Feedback")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            feedback.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase = new TableBase("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", null, relationalModel);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("content", "character varying(1000)", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("content", contentColumnBase);
            var created_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("created_date", created_dateColumnBase1);
            var customer_idColumnBase = new ColumnBase<ColumnMappingBase>("customer_id", "uuid", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("customer_id", customer_idColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("id", idColumnBase1);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "uuid", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("product_id", product_idColumnBase);
            var ratingColumnBase = new ColumnBase<ColumnMappingBase>("rating", "integer", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("rating", ratingColumnBase);
            var update_dateColumnBase1 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("update_date", update_dateColumnBase1);
            var versionColumnBase1 = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.Columns.Add("version", versionColumnBase1);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase);
            var rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase = new TableMappingBase<ColumnMappingBase>(feedback, rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase, true);
            rookieShopDomainEntitiesFeedbackAggregatorFeedbackTableBase.AddTypeMapping(rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase, false);
            defaultTableMappings1.Add(rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, feedback.FindProperty("Id")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, feedback.FindProperty("Content")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase1, feedback.FindProperty("CreatedDate")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customer_idColumnBase, feedback.FindProperty("CustomerId")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, feedback.FindProperty("ProductId")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingColumnBase, feedback.FindProperty("Rating")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase1, feedback.FindProperty("UpdateDate")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase1, feedback.FindProperty("Version")!, rookieShopDomainEntitiesFeedbackAggregatorFeedbackMappingBase);

            var tableMappings1 = new List<TableMapping>();
            feedback.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var feedbacksTable = new Table("feedbacks", null, relationalModel);
            var idColumn1 = new Column("id", "uuid", feedbacksTable);
            feedbacksTable.Columns.Add("id", idColumn1);
            var contentColumn = new Column("content", "character varying(1000)", feedbacksTable);
            feedbacksTable.Columns.Add("content", contentColumn);
            var created_dateColumn1 = new Column("created_date", "timestamp with time zone", feedbacksTable);
            feedbacksTable.Columns.Add("created_date", created_dateColumn1);
            var customer_idColumn = new Column("customer_id", "uuid", feedbacksTable)
            {
                IsNullable = true
            };
            feedbacksTable.Columns.Add("customer_id", customer_idColumn);
            var product_idColumn = new Column("product_id", "uuid", feedbacksTable);
            feedbacksTable.Columns.Add("product_id", product_idColumn);
            var ratingColumn = new Column("rating", "integer", feedbacksTable);
            feedbacksTable.Columns.Add("rating", ratingColumn);
            var update_dateColumn1 = new Column("update_date", "timestamp with time zone", feedbacksTable)
            {
                IsNullable = true
            };
            feedbacksTable.Columns.Add("update_date", update_dateColumn1);
            var versionColumn1 = new Column("version", "uuid", feedbacksTable);
            feedbacksTable.Columns.Add("version", versionColumn1);
            var pk_feedbacks = new UniqueConstraint("pk_feedbacks", feedbacksTable, new[] { idColumn1 });
            feedbacksTable.PrimaryKey = pk_feedbacks;
            var pk_feedbacksUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.FeedbackAggregator.Feedback",
                new[] { "Id" });
            pk_feedbacks.MappedKeys.Add(pk_feedbacksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_feedbacksUc).Add(pk_feedbacks);
            feedbacksTable.UniqueConstraints.Add("pk_feedbacks", pk_feedbacks);
            var ix_feedbacks_customer_id = new TableIndex(
            "ix_feedbacks_customer_id", feedbacksTable, new[] { customer_idColumn }, false);
            var ix_feedbacks_customer_idIx = RelationalModel.GetIndex(this,
                "RookieShop.Domain.Entities.FeedbackAggregator.Feedback",
                new[] { "CustomerId" });
            ix_feedbacks_customer_id.MappedIndexes.Add(ix_feedbacks_customer_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_feedbacks_customer_idIx).Add(ix_feedbacks_customer_id);
            feedbacksTable.Indexes.Add("ix_feedbacks_customer_id", ix_feedbacks_customer_id);
            var ix_feedbacks_product_id = new TableIndex(
            "ix_feedbacks_product_id", feedbacksTable, new[] { product_idColumn }, false);
            var ix_feedbacks_product_idIx = RelationalModel.GetIndex(this,
                "RookieShop.Domain.Entities.FeedbackAggregator.Feedback",
                new[] { "ProductId" });
            ix_feedbacks_product_id.MappedIndexes.Add(ix_feedbacks_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_feedbacks_product_idIx).Add(ix_feedbacks_product_id);
            feedbacksTable.Indexes.Add("ix_feedbacks_product_id", ix_feedbacks_product_id);
            relationalModel.Tables.Add(("feedbacks", null), feedbacksTable);
            var feedbacksTableMapping = new TableMapping(feedback, feedbacksTable, true);
            feedbacksTable.AddTypeMapping(feedbacksTableMapping, false);
            tableMappings1.Add(feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, feedback.FindProperty("Id")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, feedback.FindProperty("Content")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn1, feedback.FindProperty("CreatedDate")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(customer_idColumn, feedback.FindProperty("CustomerId")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, feedback.FindProperty("ProductId")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(ratingColumn, feedback.FindProperty("Rating")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn1, feedback.FindProperty("UpdateDate")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn1, feedback.FindProperty("Version")!, feedbacksTableMapping);

            var order = FindEntityType("RookieShop.Domain.Entities.OrderAggregator.Order")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var rookieShopDomainEntitiesOrderAggregatorOrderTableBase = new TableBase("RookieShop.Domain.Entities.OrderAggregator.Order", null, relationalModel);
            var created_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("created_date", created_dateColumnBase2);
            var customer_idColumnBase0 = new ColumnBase<ColumnMappingBase>("customer_id", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("customer_id", customer_idColumnBase0);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("id", idColumnBase2);
            var payment_methodColumnBase = new ColumnBase<ColumnMappingBase>("payment_method", "smallint", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("payment_method", payment_methodColumnBase);
            var update_dateColumnBase2 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesOrderAggregatorOrderTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("update_date", update_dateColumnBase2);
            var versionColumnBase2 = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.Columns.Add("version", versionColumnBase2);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.OrderAggregator.Order", rookieShopDomainEntitiesOrderAggregatorOrderTableBase);
            var rookieShopDomainEntitiesOrderAggregatorOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, rookieShopDomainEntitiesOrderAggregatorOrderTableBase, true);
            rookieShopDomainEntitiesOrderAggregatorOrderTableBase.AddTypeMapping(rookieShopDomainEntitiesOrderAggregatorOrderMappingBase, false);
            defaultTableMappings2.Add(rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, order.FindProperty("Id")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase2, order.FindProperty("CreatedDate")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customer_idColumnBase0, order.FindProperty("CustomerId")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payment_methodColumnBase, order.FindProperty("PaymentMethod")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase2, order.FindProperty("UpdateDate")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase2, order.FindProperty("Version")!, rookieShopDomainEntitiesOrderAggregatorOrderMappingBase);

            var tableMappings2 = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var ordersTable = new Table("orders", null, relationalModel);
            var idColumn2 = new Column("id", "uuid", ordersTable);
            ordersTable.Columns.Add("id", idColumn2);
            var card_brand_nameColumn = new Column("card_brand_name", "character varying(50)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("card_brand_name", card_brand_nameColumn);
            var card_charge_idColumn = new Column("card_charge_id", "character varying(50)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("card_charge_id", card_charge_idColumn);
            var card_last4digitsColumn = new Column("card_last4digits", "character(4)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("card_last4digits", card_last4digitsColumn);
            var created_dateColumn2 = new Column("created_date", "timestamp with time zone", ordersTable);
            ordersTable.Columns.Add("created_date", created_dateColumn2);
            var customer_idColumn0 = new Column("customer_id", "uuid", ordersTable);
            ordersTable.Columns.Add("customer_id", customer_idColumn0);
            var payment_methodColumn = new Column("payment_method", "smallint", ordersTable);
            ordersTable.Columns.Add("payment_method", payment_methodColumn);
            var shipping_address_cityColumn = new Column("shipping_address_city", "character varying(50)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("shipping_address_city", shipping_address_cityColumn);
            var shipping_address_provinceColumn = new Column("shipping_address_province", "character varying(50)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("shipping_address_province", shipping_address_provinceColumn);
            var shipping_address_streetColumn = new Column("shipping_address_street", "character varying(50)", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("shipping_address_street", shipping_address_streetColumn);
            var update_dateColumn2 = new Column("update_date", "timestamp with time zone", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("update_date", update_dateColumn2);
            var versionColumn2 = new Column("version", "uuid", ordersTable);
            ordersTable.Columns.Add("version", versionColumn2);
            var pk_orders = new UniqueConstraint("pk_orders", ordersTable, new[] { idColumn2 });
            ordersTable.PrimaryKey = pk_orders;
            var pk_ordersUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "Id" });
            pk_orders.MappedKeys.Add(pk_ordersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_ordersUc).Add(pk_orders);
            var pk_ordersUc0 = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card",
                new[] { "OrderId" });
            pk_orders.MappedKeys.Add(pk_ordersUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pk_ordersUc0).Add(pk_orders);
            var pk_ordersUc1 = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress",
                new[] { "OrderId" });
            pk_orders.MappedKeys.Add(pk_ordersUc1);
            RelationalModel.GetOrCreateUniqueConstraints(pk_ordersUc1).Add(pk_orders);
            ordersTable.UniqueConstraints.Add("pk_orders", pk_orders);
            var ix_orders_customer_id = new TableIndex(
            "ix_orders_customer_id", ordersTable, new[] { customer_idColumn0 }, false);
            var ix_orders_customer_idIx = RelationalModel.GetIndex(this,
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "CustomerId" });
            ix_orders_customer_id.MappedIndexes.Add(ix_orders_customer_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_orders_customer_idIx).Add(ix_orders_customer_id);
            ordersTable.Indexes.Add("ix_orders_customer_id", ix_orders_customer_id);
            relationalModel.Tables.Add(("orders", null), ordersTable);
            var ordersTableMapping = new TableMapping(order, ordersTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            ordersTable.AddTypeMapping(ordersTableMapping, false);
            tableMappings2.Add(ordersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, order.FindProperty("Id")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn2, order.FindProperty("CreatedDate")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(customer_idColumn0, order.FindProperty("CustomerId")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(payment_methodColumn, order.FindProperty("PaymentMethod")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn2, order.FindProperty("UpdateDate")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn2, order.FindProperty("Version")!, ordersTableMapping);

            var orderDetail = FindEntityType("RookieShop.Domain.Entities.OrderAggregator.OrderDetail")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            orderDetail.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase = new TableBase("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", null, relationalModel);
            var created_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("created_date", created_dateColumnBase3);
            var order_idColumnBase = new ColumnBase<ColumnMappingBase>("order_id", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("order_id", order_idColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("price", "numeric", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("price", priceColumnBase);
            var product_idColumnBase0 = new ColumnBase<ColumnMappingBase>("product_id", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("product_id", product_idColumnBase0);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("quantity", "integer", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("quantity", quantityColumnBase);
            var update_dateColumnBase3 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("update_date", update_dateColumnBase3);
            var versionColumnBase3 = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.Columns.Add("version", versionColumnBase3);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase);
            var rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase = new TableMappingBase<ColumnMappingBase>(orderDetail, rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase, true);
            rookieShopDomainEntitiesOrderAggregatorOrderDetailTableBase.AddTypeMapping(rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase, false);
            defaultTableMappings3.Add(rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)order_idColumnBase, orderDetail.FindProperty("OrderId")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase0, orderDetail.FindProperty("ProductId")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase3, orderDetail.FindProperty("CreatedDate")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, orderDetail.FindProperty("Price")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, orderDetail.FindProperty("Quantity")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase3, orderDetail.FindProperty("UpdateDate")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase3, orderDetail.FindProperty("Version")!, rookieShopDomainEntitiesOrderAggregatorOrderDetailMappingBase);

            var tableMappings3 = new List<TableMapping>();
            orderDetail.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var order_detailsTable = new Table("order_details", null, relationalModel);
            var order_idColumn = new Column("order_id", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("order_id", order_idColumn);
            var product_idColumn0 = new Column("product_id", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("product_id", product_idColumn0);
            var created_dateColumn3 = new Column("created_date", "timestamp with time zone", order_detailsTable);
            order_detailsTable.Columns.Add("created_date", created_dateColumn3);
            var priceColumn = new Column("price", "numeric", order_detailsTable);
            order_detailsTable.Columns.Add("price", priceColumn);
            var quantityColumn = new Column("quantity", "integer", order_detailsTable);
            order_detailsTable.Columns.Add("quantity", quantityColumn);
            var update_dateColumn3 = new Column("update_date", "timestamp with time zone", order_detailsTable)
            {
                IsNullable = true
            };
            order_detailsTable.Columns.Add("update_date", update_dateColumn3);
            var versionColumn3 = new Column("version", "uuid", order_detailsTable);
            order_detailsTable.Columns.Add("version", versionColumn3);
            var pk_order_details = new UniqueConstraint("pk_order_details", order_detailsTable, new[] { order_idColumn, product_idColumn0 });
            order_detailsTable.PrimaryKey = pk_order_details;
            var pk_order_detailsUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.OrderDetail",
                new[] { "OrderId", "ProductId" });
            pk_order_details.MappedKeys.Add(pk_order_detailsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_order_detailsUc).Add(pk_order_details);
            order_detailsTable.UniqueConstraints.Add("pk_order_details", pk_order_details);
            var ix_order_details_product_id = new TableIndex(
            "ix_order_details_product_id", order_detailsTable, new[] { product_idColumn0 }, false);
            var ix_order_details_product_idIx = RelationalModel.GetIndex(this,
                "RookieShop.Domain.Entities.OrderAggregator.OrderDetail",
                new[] { "ProductId" });
            ix_order_details_product_id.MappedIndexes.Add(ix_order_details_product_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_order_details_product_idIx).Add(ix_order_details_product_id);
            order_detailsTable.Indexes.Add("ix_order_details_product_id", ix_order_details_product_id);
            relationalModel.Tables.Add(("order_details", null), order_detailsTable);
            var order_detailsTableMapping = new TableMapping(orderDetail, order_detailsTable, true);
            order_detailsTable.AddTypeMapping(order_detailsTableMapping, false);
            tableMappings3.Add(order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(order_idColumn, orderDetail.FindProperty("OrderId")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn0, orderDetail.FindProperty("ProductId")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn3, orderDetail.FindProperty("CreatedDate")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, orderDetail.FindProperty("Price")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, orderDetail.FindProperty("Quantity")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn3, orderDetail.FindProperty("UpdateDate")!, order_detailsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn3, orderDetail.FindProperty("Version")!, order_detailsTableMapping);

            var card = FindEntityType("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            card.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase = new TableBase("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card", null, relationalModel);
            var card_brand_nameColumnBase = new ColumnBase<ColumnMappingBase>("card_brand_name", "character varying(50)", rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase.Columns.Add("card_brand_name", card_brand_nameColumnBase);
            var card_charge_idColumnBase = new ColumnBase<ColumnMappingBase>("card_charge_id", "character varying(50)", rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase.Columns.Add("card_charge_id", card_charge_idColumnBase);
            var card_last4digitsColumnBase = new ColumnBase<ColumnMappingBase>("card_last4digits", "character(4)", rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase.Columns.Add("card_last4digits", card_last4digitsColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase);
            rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase.Columns.Add("id", idColumnBase3);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card", rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase);
            var rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase = new TableMappingBase<ColumnMappingBase>(card, rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase, true);
            rookieShopDomainEntitiesOrderAggregatorValueObjectsCardTableBase.AddTypeMapping(rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase, false);
            defaultTableMappings4.Add(rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, card.FindProperty("OrderId")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_brand_nameColumnBase, card.FindProperty("BrandName")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_charge_idColumnBase, card.FindProperty("ChargeId")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_last4digitsColumnBase, card.FindProperty("Last4Digits")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsCardMappingBase);

            var tableMappings4 = new List<TableMapping>();
            card.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var ordersTableMapping0 = new TableMapping(card, ordersTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            ordersTable.AddTypeMapping(ordersTableMapping0, true);
            tableMappings4.Add(ordersTableMapping0);
            ordersTable.AddRowInternalForeignKey(card, RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card",
                new[] { "OrderId" },
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn2, card.FindProperty("OrderId")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(card_brand_nameColumn, card.FindProperty("BrandName")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(card_charge_idColumn, card.FindProperty("ChargeId")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(card_last4digitsColumn, card.FindProperty("Last4Digits")!, ordersTableMapping0);

            var shippingAddress = FindEntityType("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            shippingAddress.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase = new TableBase("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress", null, relationalModel);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase);
            rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase.Columns.Add("id", idColumnBase4);
            var shipping_address_cityColumnBase = new ColumnBase<ColumnMappingBase>("shipping_address_city", "character varying(50)", rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase.Columns.Add("shipping_address_city", shipping_address_cityColumnBase);
            var shipping_address_provinceColumnBase = new ColumnBase<ColumnMappingBase>("shipping_address_province", "character varying(50)", rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase.Columns.Add("shipping_address_province", shipping_address_provinceColumnBase);
            var shipping_address_streetColumnBase = new ColumnBase<ColumnMappingBase>("shipping_address_street", "character varying(50)", rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase.Columns.Add("shipping_address_street", shipping_address_streetColumnBase);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress", rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase);
            var rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase = new TableMappingBase<ColumnMappingBase>(shippingAddress, rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase, true);
            rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressTableBase.AddTypeMapping(rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase, false);
            defaultTableMappings5.Add(rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, shippingAddress.FindProperty("OrderId")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shipping_address_cityColumnBase, shippingAddress.FindProperty("City")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shipping_address_provinceColumnBase, shippingAddress.FindProperty("Province")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shipping_address_streetColumnBase, shippingAddress.FindProperty("Street")!, rookieShopDomainEntitiesOrderAggregatorValueObjectsShippingAddressMappingBase);

            var tableMappings5 = new List<TableMapping>();
            shippingAddress.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var ordersTableMapping1 = new TableMapping(shippingAddress, ordersTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            ordersTable.AddTypeMapping(ordersTableMapping1, true);
            tableMappings5.Add(ordersTableMapping1);
            ordersTable.AddRowInternalForeignKey(shippingAddress, RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress",
                new[] { "OrderId" },
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn2, shippingAddress.FindProperty("OrderId")!, ordersTableMapping1);
            RelationalModel.CreateColumnMapping(shipping_address_cityColumn, shippingAddress.FindProperty("City")!, ordersTableMapping1);
            RelationalModel.CreateColumnMapping(shipping_address_provinceColumn, shippingAddress.FindProperty("Province")!, ordersTableMapping1);
            RelationalModel.CreateColumnMapping(shipping_address_streetColumn, shippingAddress.FindProperty("Street")!, ordersTableMapping1);

            var product = FindEntityType("RookieShop.Domain.Entities.ProductAggregator.Product")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var rookieShopDomainEntitiesProductAggregatorProductTableBase = new TableBase("RookieShop.Domain.Entities.ProductAggregator.Product", null, relationalModel);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "uuid", rookieShopDomainEntitiesProductAggregatorProductTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("category_id", category_idColumnBase);
            var created_dateColumnBase4 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("created_date", created_dateColumnBase4);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("description", descriptionColumnBase0);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "uuid", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("id", idColumnBase5);
            var image_nameColumnBase = new ColumnBase<ColumnMappingBase>("image_name", "character varying(50)", rookieShopDomainEntitiesProductAggregatorProductTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("image_name", image_nameColumnBase);
            var is_deletedColumnBase0 = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("is_deleted", is_deletedColumnBase0);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("name", nameColumnBase1);
            var quantityColumnBase0 = new ColumnBase<ColumnMappingBase>("quantity", "integer", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("quantity", quantityColumnBase0);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "smallint", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("status", statusColumnBase);
            var update_dateColumnBase4 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", rookieShopDomainEntitiesProductAggregatorProductTableBase)
            {
                IsNullable = true
            };
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("update_date", update_dateColumnBase4);
            var versionColumnBase4 = new ColumnBase<ColumnMappingBase>("version", "uuid", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.Columns.Add("version", versionColumnBase4);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.ProductAggregator.Product", rookieShopDomainEntitiesProductAggregatorProductTableBase);
            var rookieShopDomainEntitiesProductAggregatorProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, rookieShopDomainEntitiesProductAggregatorProductTableBase, true);
            rookieShopDomainEntitiesProductAggregatorProductTableBase.AddTypeMapping(rookieShopDomainEntitiesProductAggregatorProductMappingBase, false);
            defaultTableMappings6.Add(rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, product.FindProperty("Id")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, product.FindProperty("CategoryId")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase4, product.FindProperty("CreatedDate")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, product.FindProperty("Description")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)image_nameColumnBase, product.FindProperty("ImageName")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase0, product.FindProperty("IsDeleted")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, product.FindProperty("Name")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase0, product.FindProperty("Quantity")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, product.FindProperty("Status")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase4, product.FindProperty("UpdateDate")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase4, product.FindProperty("Version")!, rookieShopDomainEntitiesProductAggregatorProductMappingBase);

            var tableMappings6 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var productsTable = new Table("products", null, relationalModel);
            var idColumn3 = new Column("id", "uuid", productsTable);
            productsTable.Columns.Add("id", idColumn3);
            var category_idColumn = new Column("category_id", "uuid", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("category_id", category_idColumn);
            var created_dateColumn4 = new Column("created_date", "timestamp with time zone", productsTable);
            productsTable.Columns.Add("created_date", created_dateColumn4);
            var descriptionColumn0 = new Column("description", "character varying(1000)", productsTable);
            productsTable.Columns.Add("description", descriptionColumn0);
            var image_nameColumn = new Column("image_name", "character varying(50)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("image_name", image_nameColumn);
            var is_deletedColumn0 = new Column("is_deleted", "boolean", productsTable);
            productsTable.Columns.Add("is_deleted", is_deletedColumn0);
            var nameColumn1 = new Column("name", "character varying(50)", productsTable);
            productsTable.Columns.Add("name", nameColumn1);
            var priceColumn0 = new JsonColumn("price", "jsonb", productsTable);
            productsTable.Columns.Add("price", priceColumn0);
            var quantityColumn0 = new Column("quantity", "integer", productsTable);
            productsTable.Columns.Add("quantity", quantityColumn0);
            var statusColumn = new Column("status", "smallint", productsTable);
            productsTable.Columns.Add("status", statusColumn);
            var update_dateColumn4 = new Column("update_date", "timestamp with time zone", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("update_date", update_dateColumn4);
            var versionColumn4 = new Column("version", "uuid", productsTable);
            productsTable.Columns.Add("version", versionColumn4);
            var pk_products = new UniqueConstraint("pk_products", productsTable, new[] { idColumn3 });
            productsTable.PrimaryKey = pk_products;
            var pk_productsUc = RelationalModel.GetKey(this,
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "Id" });
            pk_products.MappedKeys.Add(pk_productsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_productsUc).Add(pk_products);
            productsTable.UniqueConstraints.Add("pk_products", pk_products);
            var ix_products_category_id = new TableIndex(
            "ix_products_category_id", productsTable, new[] { category_idColumn }, false);
            var ix_products_category_idIx = RelationalModel.GetIndex(this,
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "CategoryId" });
            ix_products_category_id.MappedIndexes.Add(ix_products_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_category_idIx).Add(ix_products_category_id);
            productsTable.Indexes.Add("ix_products_category_id", ix_products_category_id);
            relationalModel.Tables.Add(("products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings6.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, product.FindProperty("CategoryId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn4, product.FindProperty("CreatedDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(image_nameColumn, product.FindProperty("ImageName")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn0, product.FindProperty("IsDeleted")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn0, product.FindProperty("Quantity")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, product.FindProperty("Status")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn4, product.FindProperty("UpdateDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn4, product.FindProperty("Version")!, productsTableMapping);

            var productPrice = FindEntityType("RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            productPrice.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase = new TableBase("RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice", null, relationalModel);
            var priceColumnBase0 = new JsonColumnBase("price", "jsonb", rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase);
            rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase.Columns.Add("price", priceColumnBase0);
            relationalModel.DefaultTables.Add("RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice", rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase);
            var rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceMappingBase = new TableMappingBase<ColumnMappingBase>(productPrice, rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase, true);
            rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceTableBase.AddTypeMapping(rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceMappingBase, false);
            defaultTableMappings7.Add(rookieShopDomainEntitiesProductAggregatorValueObjectsProductPriceMappingBase);

            var tableMappings7 = new List<TableMapping>();
            productPrice.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var productsTableMapping0 = new TableMapping(productPrice, productsTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            productsTable.AddTypeMapping(productsTableMapping0, false);
            tableMappings7.Add(productsTableMapping0);
            productsTable.AddRowInternalForeignKey(productPrice, RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice",
                new[] { "ProductId" },
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "Id" }));
            var fk_feedbacks_customers_customer_id = new ForeignKeyConstraint(
                "fk_feedbacks_customers_customer_id", feedbacksTable, customersTable,
                new[] { customer_idColumn },
                customersTable.FindUniqueConstraint("pk_customers")!, ReferentialAction.Restrict);
            var fk_feedbacks_customers_customer_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.FeedbackAggregator.Feedback",
                new[] { "CustomerId" },
                "RookieShop.Domain.Entities.CustomerAggregator.Customer",
                new[] { "Id" });
            fk_feedbacks_customers_customer_id.MappedForeignKeys.Add(fk_feedbacks_customers_customer_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_feedbacks_customers_customer_idFk).Add(fk_feedbacks_customers_customer_id);
            feedbacksTable.ForeignKeyConstraints.Add(fk_feedbacks_customers_customer_id);
            customersTable.ReferencingForeignKeyConstraints.Add(fk_feedbacks_customers_customer_id);
            var fk_feedbacks_products_product_id = new ForeignKeyConstraint(
                "fk_feedbacks_products_product_id", feedbacksTable, productsTable,
                new[] { product_idColumn },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Restrict);
            var fk_feedbacks_products_product_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.FeedbackAggregator.Feedback",
                new[] { "ProductId" },
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "Id" });
            fk_feedbacks_products_product_id.MappedForeignKeys.Add(fk_feedbacks_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_feedbacks_products_product_idFk).Add(fk_feedbacks_products_product_id);
            feedbacksTable.ForeignKeyConstraints.Add(fk_feedbacks_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_feedbacks_products_product_id);
            var fk_order_details_orders_order_id = new ForeignKeyConstraint(
                "fk_order_details_orders_order_id", order_detailsTable, ordersTable,
                new[] { order_idColumn },
                ordersTable.FindUniqueConstraint("pk_orders")!, ReferentialAction.Cascade);
            var fk_order_details_orders_order_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.OrderDetail",
                new[] { "OrderId" },
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "Id" });
            fk_order_details_orders_order_id.MappedForeignKeys.Add(fk_order_details_orders_order_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_order_details_orders_order_idFk).Add(fk_order_details_orders_order_id);
            order_detailsTable.ForeignKeyConstraints.Add(fk_order_details_orders_order_id);
            ordersTable.ReferencingForeignKeyConstraints.Add(fk_order_details_orders_order_id);
            var fk_order_details_products_product_id = new ForeignKeyConstraint(
                "fk_order_details_products_product_id", order_detailsTable, productsTable,
                new[] { product_idColumn0 },
                productsTable.FindUniqueConstraint("pk_products")!, ReferentialAction.Restrict);
            var fk_order_details_products_product_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.OrderDetail",
                new[] { "ProductId" },
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "Id" });
            fk_order_details_products_product_id.MappedForeignKeys.Add(fk_order_details_products_product_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_order_details_products_product_idFk).Add(fk_order_details_products_product_id);
            order_detailsTable.ForeignKeyConstraints.Add(fk_order_details_products_product_id);
            productsTable.ReferencingForeignKeyConstraints.Add(fk_order_details_products_product_id);
            var fk_orders_customers_customer_id = new ForeignKeyConstraint(
                "fk_orders_customers_customer_id", ordersTable, customersTable,
                new[] { customer_idColumn0 },
                customersTable.FindUniqueConstraint("pk_customers")!, ReferentialAction.Restrict);
            var fk_orders_customers_customer_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.OrderAggregator.Order",
                new[] { "CustomerId" },
                "RookieShop.Domain.Entities.CustomerAggregator.Customer",
                new[] { "Id" });
            fk_orders_customers_customer_id.MappedForeignKeys.Add(fk_orders_customers_customer_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_orders_customers_customer_idFk).Add(fk_orders_customers_customer_id);
            ordersTable.ForeignKeyConstraints.Add(fk_orders_customers_customer_id);
            customersTable.ReferencingForeignKeyConstraints.Add(fk_orders_customers_customer_id);
            var fk_products_categories_category_id = new ForeignKeyConstraint(
                "fk_products_categories_category_id", productsTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_products_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "RookieShop.Domain.Entities.ProductAggregator.Product",
                new[] { "CategoryId" },
                "RookieShop.Domain.Entities.CategoryAggregator.Category",
                new[] { "Id" });
            fk_products_categories_category_id.MappedForeignKeys.Add(fk_products_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_products_categories_category_idFk).Add(fk_products_categories_category_id);
            productsTable.ForeignKeyConstraints.Add(fk_products_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_products_categories_category_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
