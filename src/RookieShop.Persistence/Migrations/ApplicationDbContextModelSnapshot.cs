// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RookieShop.Persistence;

#nullable disable

namespace RookieShop.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RookieShop.Domain.Entities.CategoryAggregator.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 235, DateTimeKind.Utc).AddTicks(1469))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 236, DateTimeKind.Utc).AddTicks(4175))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("5ae072f4-2894-473b-8bd3-33e23a72415e"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ffd88a8-a02c-49d9-9088-f58488fa544a"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(6967),
                            Description = "A book is a medium for recording information in the form of writing or images, typically composed of many pages bound together and protected by a cover.",
                            Name = "Book",
                            Version = new Guid("ec224a40-dd38-423c-9ab1-cc153f634fa9")
                        },
                        new
                        {
                            Id = new Guid("50436dab-1c7a-4373-968f-4b19d880fca0"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7790),
                            Description = "Clothes are items worn on the body. They are typically made of fabrics or textiles but over time have included garments made from animal skin or other thin sheets of materials put together.",
                            Name = "Clothes",
                            Version = new Guid("9791118c-63bc-4310-81b2-df92c8b27f09")
                        },
                        new
                        {
                            Id = new Guid("61227d05-8f2d-47aa-9cd0-41ad0c71c33d"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7843),
                            Description = "Electronics comprises the physics, engineering, technology and applications that deal with the emission, flow and control of electrons in vacuum and matter.",
                            Name = "Electronics",
                            Version = new Guid("3718a19b-df67-47fb-976a-40f760be13c8")
                        },
                        new
                        {
                            Id = new Guid("2facad51-f7e0-4b61-b905-9e364c756ea1"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7859),
                            Description = "Furniture refers to movable objects intended to support various human activities such as seating, eating, and sleeping.",
                            Name = "Furniture",
                            Version = new Guid("4308f421-49c8-4a3a-a77d-b4b574ab6c21")
                        },
                        new
                        {
                            Id = new Guid("1b0fe880-82f2-4dad-b2cf-3ed268c990c9"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7861),
                            Description = "Jewellery consists of small decorative items worn for personal adornment, such as brooches, rings, necklaces, earrings, pendants, bracelets, and cuff-links.",
                            Name = "Jewelry",
                            Version = new Guid("8ca0ad1a-ddd9-4d87-ada6-57fe02b84e6c")
                        },
                        new
                        {
                            Id = new Guid("75b12d43-3217-4747-a2d0-64a3e556b961"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7867),
                            Description = "A shoe is an item of footwear intended to protect and comfort the human foot. Shoes",
                            Name = "Shoes",
                            Version = new Guid("debfeed3-d8d6-404b-9744-d603116701b1")
                        },
                        new
                        {
                            Id = new Guid("d9328b75-687c-4e11-b29e-cfcb6e803c2c"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 245, DateTimeKind.Utc).AddTicks(7869),
                            Description = "Sport includes all forms of competitive physical activity or games which, through casual or organized participation, at least in part aim to use, maintain or improve physical ability and skills while providing enjoyment to participants, and in some cases, entertainment for spectators.",
                            Name = "Sport",
                            Version = new Guid("3c1a1a94-b6fc-44f2-a1a0-3aaa26a4cbd0")
                        });
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CustomerAggregator.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 246, DateTimeKind.Utc).AddTicks(3350))
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 246, DateTimeKind.Utc).AddTicks(4029))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3ff89c10-016d-44d0-84b3-28e18873f45e"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b158899-216f-443a-b961-5f4213f7269b"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(2662),
                            Email = "john.doe@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "John Doe",
                            Phone = "0123456789",
                            Version = new Guid("bb408220-a446-4e32-b649-e5592981836c")
                        },
                        new
                        {
                            Id = new Guid("3b53f8c3-a7c4-4830-82ae-bb06e198e1f0"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(3447),
                            Email = "william.smith@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "William Smith",
                            Phone = "0123456789",
                            Version = new Guid("9fe55392-407d-46c1-a668-370cc6a2a859")
                        },
                        new
                        {
                            Id = new Guid("fe6986eb-208f-42b9-8b7b-553afe2c125f"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(3711),
                            Email = "maria.garcia@gmail.com",
                            Gender = (byte)2,
                            IsDeleted = false,
                            Name = "Maria Garcia",
                            Phone = "0123456789",
                            Version = new Guid("721ccb6e-4d28-4216-b8c3-a75536916728")
                        },
                        new
                        {
                            Id = new Guid("adbebe75-3aed-42ee-b08e-f64981f10ddc"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(3719),
                            Email = "anna.johnson@gmail.com",
                            Gender = (byte)2,
                            IsDeleted = false,
                            Name = "Anna Johnson",
                            Phone = "0123456789",
                            Version = new Guid("95cce9a6-8069-4654-9458-829efee23154")
                        },
                        new
                        {
                            Id = new Guid("c8f6195d-e70c-4806-b873-ed9d40973982"),
                            AccountId = new Guid("7055bbfe-25c6-4b33-98cd-fc2b9fb4bb1a"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(3722),
                            Email = "nguyenxuannhan407@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "Nhan Nguyen",
                            Phone = "0123456789",
                            Version = new Guid("f570833e-dd29-49fc-a3f7-19f27a081c43")
                        },
                        new
                        {
                            Id = new Guid("7fc6f693-5012-4019-af59-25261473a7a7"),
                            AccountId = new Guid("e5255692-c91f-43ba-937c-059895fd67a2"),
                            CreatedDate = new DateTime(2024, 5, 15, 17, 50, 20, 248, DateTimeKind.Utc).AddTicks(4119),
                            Email = "nguyenxuannhan.dev@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "Fox Min Chan",
                            Phone = "0123456789",
                            Version = new Guid("d75f50d2-1722-4f35-9973-20146f9aaef0")
                        });
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 249, DateTimeKind.Utc).AddTicks(4153))
                        .HasColumnName("created_date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 249, DateTimeKind.Utc).AddTicks(4752))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f72341f8-0bcf-4981-9673-4fe41091ee9c"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_feedbacks_customer_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_feedbacks_product_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 255, DateTimeKind.Utc).AddTicks(5679))
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("order_status");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 255, DateTimeKind.Utc).AddTicks(6347))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("06d257b6-d97c-4188-94e9-8147558582b0"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 274, DateTimeKind.Utc).AddTicks(1455))
                        .HasColumnName("created_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 274, DateTimeKind.Utc).AddTicks(1978))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("4a763110-16c7-4eb8-861e-405871622619"))
                        .HasColumnName("version");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_details");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_details_product_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 277, DateTimeKind.Utc).AddTicks(193))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("image_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 15, 17, 50, 20, 277, DateTimeKind.Utc).AddTicks(1034))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("79f84530-e1ae-4942-a178-c36a7fc53326"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CustomerAggregator.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feedbacks_customers_customer_id");

                    b.HasOne("RookieShop.Domain.Entities.ProductAggregator.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_products_product_id");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CustomerAggregator.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.OwnsOne("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card", "Card", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("BrandName")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("card_brand_name");

                            b1.Property<string>("ChargeId")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("card_charge_id");

                            b1.Property<string>("Last4Digits")
                                .HasMaxLength(4)
                                .HasColumnType("character(4)")
                                .HasColumnName("card_last4digits")
                                .IsFixedLength();

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_city");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_province");

                            b1.Property<string>("Street")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_street");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("Card");

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("RookieShop.Domain.Entities.ProductAggregator.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CategoryAggregator.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PriceSale")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("price");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CategoryAggregator.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CustomerAggregator.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
