// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using RookieShop.Persistence;

#nullable disable

namespace RookieShop.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RookieShop.Domain.Entities.CategoryAggregator.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(3626))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(3854))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("56707bd4-7d78-4579-bccc-09a2e6eed37e"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56ac91ea-140b-4952-86ca-a26a991dcf22"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(8623),
                            Description = "A book is a medium for recording information in the form of writing or images, typically composed of many pages bound together and protected by a cover.",
                            Name = "Book",
                            Version = new Guid("1c8dcd2e-fa3c-4704-a05b-a12b18c49fb8")
                        },
                        new
                        {
                            Id = new Guid("09d65d8d-827a-43b1-a377-477c62cc9cf2"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(8630),
                            Description = "Clothes are items worn on the body. They are typically made of fabrics or textiles but over time have included garments made from animal skin or other thin sheets of materials put together.",
                            Name = "Clothes",
                            Version = new Guid("90f840f8-ca4a-458b-be58-d7be6dd65c0b")
                        },
                        new
                        {
                            Id = new Guid("07339a41-9592-4adf-a121-45ef2550b596"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(8643),
                            Description = "Electronics comprises the physics, engineering, technology and applications that deal with the emission, flow and control of electrons in vacuum and matter.",
                            Name = "Electronics",
                            Version = new Guid("04f67a60-e8d3-4dd2-8a3a-d9dead7e2374")
                        },
                        new
                        {
                            Id = new Guid("5cdd37b1-bb70-43bf-9453-537f8d50b8fd"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(8645),
                            Description = "Furniture refers to movable objects intended to support various human activities such as seating, eating, and sleeping.",
                            Name = "Furniture",
                            Version = new Guid("fd3d3204-9b4e-4ba7-b889-ad2cce3395ba")
                        },
                        new
                        {
                            Id = new Guid("341f5112-ebc8-431e-91d3-ac35118e265a"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(8647),
                            Description = "Jewellery consists of small decorative items worn for personal adornment, such as brooches, rings, necklaces, earrings, pendants, bracelets, and cufflinks.",
                            Name = "Jewelry",
                            Version = new Guid("59632f81-53d6-4f05-8001-a3ba63005ded")
                        });
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CustomerAggregator.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(9791))
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 515, DateTimeKind.Utc).AddTicks(9999))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("272aa9a6-4f25-4aa0-9d25-6d1cd12696b6"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3e82604-92a3-4b64-bbd5-d3051a78a439"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(6187),
                            Email = "john.doe@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "John Doe",
                            Phone = "0123456789",
                            Version = new Guid("3cbac8d8-5e08-43f9-9653-9e2c59eaf537")
                        },
                        new
                        {
                            Id = new Guid("0dceb5c5-0528-407a-9555-2879159a5cc0"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(6202),
                            Email = "william.smith@gmail.com",
                            Gender = (byte)1,
                            IsDeleted = false,
                            Name = "William Smith",
                            Phone = "0123456789",
                            Version = new Guid("7b1030d3-e901-4702-b7c7-52d38d7c4102")
                        },
                        new
                        {
                            Id = new Guid("1607e55d-4dc4-4fce-923f-5cc770c4a26c"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(6205),
                            Email = "maria.garcia@gmail.com",
                            Gender = (byte)2,
                            IsDeleted = false,
                            Name = "Maria Garcia",
                            Phone = "0123456789",
                            Version = new Guid("f44afe40-3d1c-4151-8602-204b7ad77f94")
                        },
                        new
                        {
                            Id = new Guid("ad36836d-87d6-4801-a3af-a97c5a1c2fcb"),
                            CreatedDate = new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(6207),
                            Email = "anna.johnson@gmail.com",
                            Gender = (byte)2,
                            IsDeleted = false,
                            Name = "Anna Johnson",
                            Phone = "0123456789",
                            Version = new Guid("1aa1afd9-cc09-4e9e-9e1c-8ea25f604c1e")
                        });
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(7286))
                        .HasColumnName("created_date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 516, DateTimeKind.Utc).AddTicks(7474))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("da261efa-b802-4575-b0a9-6a4c72023c41"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_feedbacks_customer_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_feedbacks_product_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 517, DateTimeKind.Utc).AddTicks(6496))
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("smallint")
                        .HasColumnName("payment_method");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 517, DateTimeKind.Utc).AddTicks(6702))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("49cf61ae-ebdc-4687-8c62-b6ace80d1a8f"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 520, DateTimeKind.Utc).AddTicks(8045))
                        .HasColumnName("created_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 520, DateTimeKind.Utc).AddTicks(8259))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("0d0c01e7-f257-483b-80fa-287710ab1069"))
                        .HasColumnName("version");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_details");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_details_product_id");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 521, DateTimeKind.Utc).AddTicks(6367))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(384)")
                        .HasColumnName("embedding");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("image_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 5, 14, 17, 22, 17, 521, DateTimeKind.Utc).AddTicks(6606))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("65d30891-237b-4ce4-8c0f-48c9709a9e59"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.FeedbackAggregator.Feedback", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CustomerAggregator.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_feedbacks_customers_customer_id");

                    b.HasOne("RookieShop.Domain.Entities.ProductAggregator.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_products_product_id");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CustomerAggregator.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.OwnsOne("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.Card", "Card", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("BrandName")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("card_brand_name");

                            b1.Property<string>("ChargeId")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("card_charge_id");

                            b1.Property<string>("Last4Digits")
                                .HasMaxLength(4)
                                .HasColumnType("character(4)")
                                .HasColumnName("card_last4digits")
                                .IsFixedLength();

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.OwnsOne("RookieShop.Domain.Entities.OrderAggregator.ValueObjects.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_city");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_province");

                            b1.Property<string>("Street")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("shipping_address_street");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("Card");

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.OrderDetail", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.OrderAggregator.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_orders_order_id");

                    b.HasOne("RookieShop.Domain.Entities.ProductAggregator.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.HasOne("RookieShop.Domain.Entities.CategoryAggregator.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("RookieShop.Domain.Entities.ProductAggregator.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PriceSale")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("price");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CategoryAggregator.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.CustomerAggregator.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.OrderAggregator.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("RookieShop.Domain.Entities.ProductAggregator.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
