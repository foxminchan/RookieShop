@using System.Globalization
@using System.Web
@using RookieShop.Storefront.Areas.Product.Models.Products
@model RookieShop.Storefront.Areas.Product.Models.Products.ProductViewModel

@{
    ViewBag.Title = Model.Name ?? "Product Detail";
    Layout = "~/Views/Shared/_layout.cshtml";
}

@section MetaTags{
    <meta name="title" content="@Model.Name"/>
    <meta name="description" content="@Model.Description"/>
}

<section id="product-list-container" class="py-8 bg-white md:py-16 antialiased">
    <div class="max-w-screen-xl px-4 mx-auto 2xl:px-0">
        <div class="lg:grid lg:grid-cols-2 lg:gap-8 xl:gap-16">
            <div class="shrink-0 max-w-md lg:max-w-lg mx-auto">
                <img asp-append-version="true" class="w-full" loading="lazy" src="@(Model.ImageUrl ?? "~/imgs/product/default-image.png")" alt="@Model.Name"/>
            </div>
            <div class="mt-6 sm:mt-8 lg:mt-0">
                <h1 class="text-xl font-semibold text-gray-900 sm:text-2xl">
                    @Model.Name
                </h1>
                <div class="mt-4 sm:items-center sm:gap-4 sm:flex">
                    <p class="text-2xl font-medium text-gray-500 line-through sm:text-3xl">
                        @($"{Model.Price.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))}")
                    </p>
                    <p class="text-2xl font-extrabold text-gray-900 sm:text-3xl">
                        @($"{Model.PriceSale.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))}")
                    </p>
                </div>
                @if (Model.Status != ProductStatus.Discontinued && Model.Quantity > 0)
                {
                    @await Component.InvokeAsync("AddToCart", new { ProductId = Model.Id, Price = Model.PriceSale })
                }
                else
                {
                    <p class="mt-6 text-red-900">
                        @if (Model.Status == ProductStatus.Discontinued)
                        {
                            <span>Discontinued</span>
                        }
                        else
                        {
                            <span>Out of stock</span>
                        }
                    </p>
                }
                <hr class="my-6 md:my-8 border-gray-200"/>

                <p class="mb-6 text-gray-500 text-justify">
                    @Html.Raw(HttpUtility.HtmlDecode(Model.Description))
                </p>
            </div>
        </div>
    </div>
</section>
<section class="py-24 relative">
    <div class="w-full max-w-7xl px-4 md:px-5 lg:px-6 mx-auto">
        <h2 class="font-manrope font-bold text-3xl sm:text-4xl leading-10 text-black mb-8 text-center">
            Customer reviews &
            rating
        </h2>
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 pb-11 border-b border-gray-100 max-xl:max-w-2xl max-xl:mx-auto">
            <div class="p-2 rounded-3xl flex items-center justify-center flex-col">
                <h2 class="font-manrope font-bold text-5xl text-amber-400 mb-6">
                    @Model.AverageRating.ToString("0.0")
                </h2>
                <div class="flex items-center justify-center gap-2 sm:gap-6 mb-4">
                    @{
                        Model.AverageRating = Model.AverageRating % 1 >= 0.5 ? Math.Ceiling(Model.AverageRating) : Math.Floor(Model.AverageRating);

                        for (var star = 1; star <= 5; star++)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" width="30" height="30" class="w-5 h-5 @(star <= Model.AverageRating ? "text-amber-500" : "text-gray-300")"
                                 fill="currentColor" viewBox="0 0 20 20">
                                <path
                                    d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z">
                                </path>
                            </svg>
                        }
                    }
                </div>
                <p class="font-medium text-xl leading-8 text-gray-900 text-center">@Model.TotalReviews reviews</p>
            </div>
            @await Component.InvokeAsync("Feedback")
        </div>
        @await Component.InvokeAsync("Rating", new { Context.Request.Query, ProductId = Model.Id })
    </div>
</section>

@section Scripts{
    <partial name="_ValidationScriptsPartial"/>
    <script>
        $(document).on('htmx:afterOnLoad', (event) => {
            if (event.detail.xhr.status === 200) {
                toastr.success("Item added to cart!", "Success");
            } else {
                toastr.error("Error adding to cart. Please try again.", "Error");
            }
        });
    </script>
}